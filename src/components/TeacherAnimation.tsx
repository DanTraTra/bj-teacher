import React, {useEffect, useState} from 'react';
import {useSpring, animated} from '@react-spring/web';
import {interpolatePath} from 'd3-interpolate-path';

const TeacherAnimation = () => {
    const [index, setIndex] = useState(0);
    const [startAnimation, setStartAnimation] = useState(false);

    // const paths = [
    //     "M52.5298 59.8945C52.5298 59.8945 54.9575 60.189 55.0776 64.0634C55.1957 67.9388 48.2567 86.6234 48.2567 86.6234L45.3398 83.8484C45.3398 83.8484 47.2143 64.3733 48.2646 62.8662C49.318 61.3611 52.0737 59.8342 52.5298 59.8945Z",
    //     "M51.3495 58.576C51.3495 58.576 53.7894 58.4092 54.6351 62.1921C55.4791 65.9764 52.1734 85.6318 52.1734 85.6318L48.7871 83.4541C48.7871 83.4541 46.97 63.9735 47.7185 62.296C48.4704 60.6198 50.8902 58.6025 51.3495 58.576Z",
    //     "M51.5006 60.5001C51.5006 60.5001 54.2588 60.4998 54.6359 62.192C55.5 68.5 53.5 74.3223 53.5 74.3223L48.5001 74.3222C48.5001 74.3222 47 67.5 47.7193 62.2959C48.4712 60.6198 51.0413 60.5266 51.5006 60.5001Z",
    //     "M50.6784 59.5004C50.6784 59.5004 53.8018 58.308 54.1789 60.0002C55.043 66.3082 54.6786 67.5003 54.6786 67.5003L54.1786 68.5002C54.1786 68.5002 48.179 70.0001 47.6786 63.0002C48.4305 61.324 50.2191 59.5269 50.6784 59.5004Z",
    // ];

    const paths = [
        "M10 10 H40 V40 H10 Z",
        "M20 10 H40 V40 H20 Z",
        "M20 20 H40 V40 H20 Z",
        "M20 20 H40 V40 H20 Z",
    ]

    const interpolators = paths.map((path, i) => interpolatePath(path, paths[(i + 1) % paths.length]));

    const {t} = useSpring({
        // t: 0, // Always animate from 0 to 1
        // from: {t: 1}, // Start from 0 each time
        // t: index === paths.length - 1 ? 1 : 0, // interpolate between 0 and 1
        t: index,
        config: {duration: 1000}, // Adjust the duration as needed
        // onRest: () => {
        //     if (index < paths.length - 1) {
        //         setIndex(index + 1);
        //     }
        // },
        onRest: () => setIndex((index + 1) % paths.length), // Move to the next path


    });

    const interpolatedPath = t.to((t) => interpolators[index](t));

    const handleClick = () => {
        setIndex((index + 1) % paths.length)
        if (!startAnimation) {
            // setIndex(0);
            setStartAnimation(true);
        } else {
            setStartAnimation(false);
        }
    };

    useEffect(() => {
        console.log(index)
    }, [index])

    return (
        <svg
            width="61"
            height="187"
            viewBox="0 0 61 187"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            onClick={handleClick}
        >
            <path
                d="M25.8104 124.515H14.9004C15.0812 125.427 15.2066 126.146 15.2415 126.591C15.8529 134.322 14.1524 137.48 14.9179 147.362C15.6864 157.239 18.773 172.981 20.078 175.982C21.3808 178.982 24.3883 178.538 24.374 175.958C24.3606 173.378 25.8721 132.553 25.8454 126.825C25.8402 126.13 25.8279 125.345 25.8104 124.515Z"
                fill="#EAC3A9"/>
            <path
                d="M39.5238 124.969C39.5516 124.253 39.7108 122.827 39.9266 121.029H28.8419C28.8645 122.72 28.8943 124.324 28.9416 125.631C29.1461 131.355 31.2925 165.314 30.8168 176.87C30.712 179.447 33.9301 179.771 35.1107 176.718C36.2934 173.666 39.7817 155.165 40.1445 145.262C40.5113 135.36 39.2269 132.718 39.5238 124.969Z"
                fill="#EAC3A9"/>
            <path
                d="M18.0167 168.183C17.8472 167.486 17.2882 164.27 17.0714 163.369L24.7705 164.374C24.8733 168.21 24.9308 170.787 24.9308 170.787L24.9873 176.265C24.9873 176.265 24.2639 182.07 23.3258 182.704C21.1547 184.174 17.3499 181.016 17.3499 181.016C17.3499 181.016 17.4742 179.832 17.6695 178.154C18.1092 174.399 18.3013 169.339 18.0167 168.183Z"
                fill="#E8C5AF"/>
            <path
                d="M24.9805 175.216C24.9805 175.216 24.4729 182.592 21.4756 182.165C17.9256 181.658 17.6698 178.154 17.6698 178.154C17.6698 178.154 17.4098 179.795 17.3502 181.016C17.1385 185.268 20.6146 186.773 21.9051 186.703C22.6634 186.659 24.3188 185.436 24.7277 180.559C24.8787 178.761 24.9805 175.216 24.9805 175.216Z"
                fill="#313D3F"/>
            <path
                d="M37.1162 168.312C37.2477 167.607 37.4152 161.475 37.5858 160.567L30.4672 158.446C30.8094 163.327 30.718 171.541 30.718 171.541L30.7426 175.018C30.7426 175.018 31.6273 182.52 32.5983 183.099C34.8454 184.449 38.4756 181.091 38.4756 181.091C38.4756 181.091 38.2845 179.918 37.9978 178.249C37.3607 174.524 36.8953 169.486 37.1162 168.312Z"
                fill="#EAC3A9"/>
            <path
                d="M30.7441 174.4C30.7441 174.4 31.1274 181.122 34.6753 181.655C38.2223 182.186 37.9983 177.669 37.9983 177.669C37.9983 177.669 38.398 179.293 38.4761 180.511C38.8593 186.465 35.4419 186.724 34.1493 186.722C33.3889 186.721 31.7572 185.303 31.0832 180.452C30.8376 178.665 30.7441 174.4 30.7441 174.4Z"
                fill="#313D3F"/>
            <path
                d="M15.9775 19.5748C15.9066 18.1774 15.2593 14.9388 14.9849 13.2527C13.8259 6.15882 19.3333 0 27.2359 0C27.501 0 27.7445 0 27.9808 0C28.1041 0 28.2325 0 28.3589 0C28.5942 0 28.8398 0 29.1028 0C37.0054 0 42.5128 6.15882 41.3558 13.2527C41.0784 14.9398 40.4321 18.1774 40.3612 19.5748C40.1362 24.3106 43.5752 26.084 43.5752 26.084C43.5752 26.084 42.0083 28.1472 38.6083 29.6947C34.5147 31.5585 28.3928 31.5585 28.3928 31.5585H28.1812H28.1596H27.951C27.951 31.5585 21.8291 31.5585 17.7325 29.6947C14.3325 28.1472 12.7676 26.084 12.7676 26.084C12.7676 26.084 16.2015 24.3106 15.9775 19.5748Z"
                fill="#42331F"/>
            <path
                d="M43.1833 36.2062C43.1833 36.2062 44.7923 35.4004 45.728 38.6604C47.8189 43.6233 55.5679 60.6649 54.4996 62.0001C53.6877 63.0122 49.3138 65.4372 48.089 63.7592C46.8692 62.0768 39.4859 49.0348 39.4859 49.0348L38.8514 39.4845L43.1833 36.2062Z"
                fill="#DDDCEA"/>
            <path
                d="M12.662 36.1062C12.662 36.1062 11.053 35.3004 10.1173 38.5603C8.02639 43.5233 0.144194 61.6493 1.21252 62.9845C2.02445 63.9965 6.53153 65.3372 7.75627 63.6592C8.97609 61.9768 16.3594 48.9347 16.3594 48.9347L16.9939 39.3845L12.662 36.1062Z"
                fill="#DDDCEA"/>
            <path
                d="M41.8782 80.9093L26.7698 82.093L13.7863 80.9566C15.8968 74.3118 16.7619 72.49 13.9979 61.2533L12.7238 52.1148C12.7238 52.1148 11.7056 36.392 11.8227 36.3745L26.104 34.5024L28.5 34.5025L44.4141 36.5V50.8674L41.6347 60.831C39.2231 72.6082 40.2887 75.3095 41.8782 80.9093Z"
                fill="#DDDCEA"/>
            <path
                d="M10.2165 100.221C9.92884 87.6115 14.717 79.3577 14.717 79.3577L41.879 80.9082C41.879 80.9082 44.4437 86.358 45.4383 94.431C46.4288 102.504 42.6147 133.17 42.6147 133.17L12.1853 133.007C12.1853 133.007 10.5998 116.999 10.2165 100.221Z"
                fill="#2E2B29"/>
            <path
                d="M15.2275 76.1204L18.3121 77.5116C24.4514 79.8605 31.2555 79.9735 37.4709 77.8322L40.7075 76.4964C41.0096 77.9164 41.4206 79.2943 41.8799 80.9106L13.788 80.9578C14.387 79.0621 14.8833 77.5589 15.2275 76.1204Z"
                fill="#2E2B29"/>
            <path
                d="M14.4717 63.2418C13.5849 60.072 20.8247 59.7699 17.024 46.3333C15.4889 40.9061 11.9235 35.9803 11.9235 35.9803L19.7941 35.2302C19.7941 35.2302 22.6804 47.5663 25.2502 55.8541C25.3437 56.1572 26.8716 58.7301 28.1683 58.6397C29.6982 58.5328 31.034 55.7062 31.1449 55.3476C33.7168 47.0598 36.5 35.2302 36.5 35.2302C36.5 35.2302 44.3422 35.4871 44.4131 36.2885C44.4131 36.2885 41.9461 40.9061 40.4099 46.3333C36.6102 59.7699 42.2481 59.2572 41.3583 62.427C39.6023 70.3901 40.7346 76.4832 40.7346 76.4832L37.4692 77.8323C31.2539 79.9736 24.4497 79.8616 18.3104 77.5117L15.1724 76.0948C15.1745 76.0948 16.6469 72.7349 14.4717 63.2418Z"
                fill="#313D3F"/>
            <path
                d="M28.0008 79.4472C27.9947 79.029 27.9803 78.6488 27.9536 78.3303C27.7162 75.219 27.896 61.7671 27.896 60.271C27.896 59.8703 27.9536 59.2559 28.0276 58.5911C28.0933 58.5941 28.156 58.6013 28.2228 58.6013C28.2598 58.6013 28.2937 58.5962 28.3307 58.5952C28.2731 64.2135 28.4129 75.5756 28.5547 78.2101C28.5742 78.5923 28.5773 79.0362 28.5649 79.5212C28.3841 79.4616 28.192 79.439 28.0008 79.4472Z"
                fill="#7C7C80"/>
            <path
                d="M28.9167 61.049C28.9167 61.4785 29.2671 61.8288 29.6987 61.8288C30.1292 61.8288 30.4775 61.4785 30.4775 61.049C30.4775 60.6174 30.1292 60.2681 29.6987 60.2681C29.2671 60.2681 28.9167 60.6174 28.9167 61.049Z"
                fill="#2E2B29"/>
            <path
                d="M28.9167 68.4224C28.9167 68.8518 29.2671 69.2022 29.6986 69.2022C30.1292 69.2022 30.4785 68.8518 30.4785 68.4224C30.4785 67.9898 30.1292 67.6394 29.6986 67.6394C29.2671 67.6394 28.9167 67.9898 28.9167 68.4224Z"
                fill="#2E2B29"/>
            <path
                d="M28.7603 75.3126C28.7603 75.7452 29.1127 76.0945 29.5443 76.0945C29.9748 76.0945 30.3252 75.7452 30.3252 75.3126C30.3252 74.8831 29.9748 74.5327 29.5443 74.5327C29.1117 74.5327 28.7603 74.8831 28.7603 75.3126Z"
                fill="#2E2B29"/>
            <path
                d="M20.1622 35.1549C21.7661 34.8292 22.9529 33.4482 23.0279 31.8114L23.1307 29.5366L23.2375 27.2083H28.2671H33.2958L33.379 28.9868L33.5094 31.7847C33.5845 33.4246 34.7609 34.8117 36.3659 35.1559L37.416 36.7321C37.416 39.0882 28.5713 41.697 28.5713 41.697C28.5713 41.697 19.9259 39.4375 19.9259 37.0784L20.1622 35.1549Z"
                fill="#EAC3A9"/>
            <path
                d="M23.1792 28.4887L23.2398 26.0515L28.2695 27.2095H33.2981L33.3721 28.7364C32.0928 30.1019 30.2002 31.6781 28.252 31.6637C26.4929 31.6781 24.5109 29.92 23.1792 28.4887Z"
                fill="#BC9982"/>
            <path
                d="M28.239 8.70312L29.7381 8.70723C33.7279 8.72573 36.9512 11.9623 36.9512 15.9521L36.5638 20.7803C36.4765 22.2887 35.8332 24.0724 35.2178 25.0999C35.2178 25.0999 32.0099 30.5323 28.24 30.5056C24.9962 30.5323 21.5006 24.9016 21.5006 24.9016C20.5235 23.4641 20.0868 21.9609 20.0159 20.6848L19.5278 15.9531C19.5278 11.9634 22.7542 8.72675 26.7409 8.70826L28.239 8.70312Z"
                fill="#EAC3A9"/>
            <path
                d="M19.8887 17.3928C19.8887 17.3928 19.7644 15.2381 18.7657 15.7703C17.7669 16.3016 19.1397 21.7308 20.0757 22.6361C21.0118 23.5403 19.8887 17.3928 19.8887 17.3928Z"
                fill="#EAC3A9"/>
            <path
                d="M36.5791 17.4872C36.5791 17.4872 36.7034 15.3336 37.7022 15.8638C38.7019 16.396 37.3272 21.8253 36.3911 22.7305C35.455 23.6347 36.5791 17.4872 36.5791 17.4872Z"
                fill="#EAC3A9"/>
            <path
                d="M31.1465 25.3402C31.1465 25.3402 28.4924 25.036 26.0891 25.3885C26.0891 25.3885 29.0124 28.4812 31.1465 25.3402Z"
                fill="#EAC3A9"/>
            <path
                d="M3.46926 59.8943C3.46926 59.8943 1.04148 60.1887 0.921383 64.0631C0.803321 67.9386 7.74228 86.6232 7.74228 86.6232L10.6592 83.8482C10.6592 83.8482 8.7847 64.373 7.73444 62.8659C6.68107 61.3609 3.92535 59.834 3.46926 59.8943Z"
                fill="#EAE9F7"/>
            <path
                d="M9.17974 81.7564C9.17974 81.7564 10.7775 81.443 11.4053 82.5126C12.0321 83.5864 12.8859 89.1595 13.8415 89.8017C14.7971 90.4429 13.4295 91.0152 12.6229 90.0627C11.8194 89.1123 10.8988 87.3069 10.8988 87.3069C10.8988 87.3069 10.5689 91.233 11.2491 93.4319C12.626 97.8727 9.84146 96.0859 8.53859 94.7676C6.85862 93.064 5.7489 83.4764 6.09209 82.4654C6.44041 81.4543 9.17974 81.7564 9.17974 81.7564Z"
                fill="#EAC3A9"/>
            <path
                d="M24.0369 45.3121C23.7112 46.9201 17.0252 37.7723 19.5796 35.1429C21.2472 33.4311 22.3703 33.5924 22.3703 33.5924C22.3703 33.5924 23.2375 35.3484 28.1983 40.0636C28.2651 40.1273 28.7737 41.3675 28.6411 41.4004C27.2694 41.7353 24.6596 42.2512 24.0369 45.3121Z"
                fill="#EEEEF5"/>
            <path
                d="M33.8849 44.6623C34.2117 46.2713 39.5588 37.7719 37.0044 35.1415C35.3378 33.4297 34.2137 33.591 34.2137 33.591C34.2137 33.591 34.1377 35.347 29.179 40.0621C29.1111 40.1258 28.6025 41.366 28.734 41.3989C30.1058 41.7349 33.2622 41.5993 33.8849 44.6623Z"
                fill="#EEEEF5"/>
            <path
                d="M33.3887 39.6669C33.3887 39.1038 32.7085 38.8223 32.3067 39.2189L28.8009 42.7257L32.3067 46.2336C32.7085 46.6312 33.3887 46.3477 33.3887 45.7856V39.6669Z"
                fill="#313D3F"/>
            <path
                d="M28.6221 42.7267L25.1152 39.2198C24.7186 38.8222 24.0353 39.1047 24.0353 39.6678V45.7876C24.0353 46.3496 24.7186 46.6322 25.1152 46.2356L28.6221 42.7267Z"
                fill="#313D3F"/>
            <path
                d="M27.3981 42.7269C27.3981 43.5017 28.0269 44.1295 28.8006 44.1295C29.5743 44.1295 30.2021 43.5017 30.2021 42.7269C30.2021 41.9522 29.5743 41.3254 28.8006 41.3254C28.0269 41.3254 27.3981 41.9522 27.3981 42.7269Z"
                fill="#202D2F"/>
            <path
                d="M37.2139 7.61699V16.2767C37.2139 16.2767 33.6413 15.1958 31.9983 14.0841C28.961 12.0363 28.2376 9.6237 28.2376 9.6237C28.2376 9.6237 28.0146 13.7738 29.3802 15.13C29.3802 15.13 26.121 15.2071 24.9804 11.9469C24.4133 10.3244 24.4708 9.7213 24.4708 9.7213C24.4708 9.7213 21.1211 9.1829 20.5611 15.13L18.7466 7.61597L37.2139 7.61699Z"
                fill="#42331F"/>
            <path
                d="M28.241 4.83656C23.8823 4.83656 20.1556 7.49881 18.5732 11.281C18.3986 11.6992 17.7584 11.5893 17.8057 11.1382C18.342 5.84762 22.8096 1.72119 28.241 1.72119C33.6703 1.72119 38.141 5.84762 38.6763 11.1382C38.7226 11.5882 38.0834 11.6992 37.9088 11.281C36.3274 7.49881 32.5986 4.83656 28.241 4.83656Z"
                fill="#202D2F"/>
            <animated.path
                d={interpolatedPath}
                fill="#EAE9F7"/>
            <path
                d="M46.9882 81.7564C46.9882 81.7564 45.3905 81.443 44.7627 82.5126C44.1359 83.5864 43.282 89.1595 42.3265 89.8017C41.3709 90.4429 42.7385 91.0152 43.5451 90.0627C44.3486 89.1123 45.2692 87.3069 45.2692 87.3069C45.2692 87.3069 45.599 91.233 44.9188 93.4319C43.542 97.8727 46.3265 96.0859 47.6294 94.7676C49.3093 93.064 50.4191 83.4764 50.0759 82.4654C49.7276 81.4543 46.9882 81.7564 46.9882 81.7564Z"
                fill="#EAC3A9"/>
            <ellipse cx="24.0359" cy="17.5645" rx="2.73126" ry="2.73125" stroke="black" strokeWidth="0.437001"/>
            <ellipse cx="32.7752" cy="17.5645" rx="2.73126" ry="2.73125" stroke="black" strokeWidth="0.437001"/>
            <path d="M26.7676 17.5648C27.8601 17.0185 28.9526 17.0185 30.0451 17.5648" stroke="black"
                  strokeWidth="0.327751" strokeLinecap="round"/>
            <path d="M21.3044 17.0183H20.2119M35.507 17.0183H36.5995" stroke="black" strokeWidth="0.327751"
                  strokeLinecap="round"/>
        </svg>


        // <svg width="100" height="100" onClick={() => setToggle(!toggle)}>
        //     <animated.path d={path} fill="transparent" stroke="black"/>
        // </svg>
    )

};

export default TeacherAnimation;

//------------------------------------------------
//
// import React, {useEffect, useMemo, useState} from 'react';
// import {useSpring, animated} from '@react-spring/web';
// import {interpolatePath} from 'd3-interpolate-path';
//
// // Define the type for your props
// interface TeacherAnimationProps {
//     svgPaths: string[]; // Array of SVG file paths
//     duration?: number;  // Duration of each transition in milliseconds
// }
//
// interface PathAttributes {
//     d: string;
//     fill: string;
//     stroke: string;
//
//     [key: string]: string;
// }
//
// const fetchSVGPaths = async (svgPath: string): Promise<PathAttributes[]> => {
//     const response = await fetch(svgPath);
//     const text = await response.text();
//     const parser = new DOMParser();
//     const doc = parser.parseFromString(text, 'image/svg+xml');
//     const pathElements = Array.from(doc.querySelectorAll('path'));
//
//     return pathElements.map((path) => ({
//         d: path.getAttribute('d') || '',
//         fill: path.getAttribute('fill') || 'transparent',
//         stroke: path.getAttribute('stroke') || '',
//         ...Array.from(path.attributes).reduce((attrs, attr) => {
//             attrs[attr.name] = attr.value;
//             return attrs;
//         }, {} as { [key: string]: string }),
//     }));
// };
//
// const TeacherAnimation: React.FC<TeacherAnimationProps> = ({svgPaths, duration = 1000}) => {
//     const [index, setIndex] = useState(0);
//     const [paths, setPaths] = useState<PathAttributes[][]>([]);
//
//     useEffect(() => {
//         const loadSVGPaths = async () => {
//             const allPaths = await Promise.all(svgPaths.map(fetchSVGPaths));
//             setPaths(allPaths);
//         };
//         loadSVGPaths();
//     }, [svgPaths]);
//
//
//     // Memoize the interpolators to avoid recalculating them on each render
//     const interpolators = useMemo(() => {
//         return paths.map((currentPaths, i) => {
//             const nextPaths = paths[(i + 1) % paths.length];
//             return currentPaths.map((path, j) => ({
//                 interpolate: interpolatePath(path.d, nextPaths[j]?.d || ''),
//                 attributes: path,
//             }));
//         });
//     }, [paths]);
//
//     // Ensure the correct interpolator is selected
//     const interpolator = interpolators[index % (paths.length - 1)];
//
//     const {t} = useSpring({
//         t: 1, // always interpolate to 1
//         config: {duration}, // Adjust the duration as needed
//         onRest: () => setIndex((index + 1) % paths.length), // Set for loop
//         // onRest: () => {
//         //     if (index < paths.length - 2) {
//         //         setIndex(index + 1); // move to the next path
//         //     }
//         // },
//     });
//
//     if (paths.length === 0) {
//         return <div>Loading...</div>;
//     }
//
//
//     return (
//         <svg width="61" height="187" viewBox="0 0 61 187" fill="none" xmlns="http://www.w3.org/2000/svg"
//              onClick={() => {
//                  console.log("click")
//                  setIndex((index + 1) % paths.length)
//              }}>
//             {interpolator.map(({interpolate, attributes}, i) => {
//                 const interpolatedPath = t.to((t) => interpolate(t));
//                 return (
//                     <animated.path
//                         key={i}
//                         d={interpolatedPath}
//                         fill={attributes.fill}
//                         stroke={attributes.stroke}
//                         {...attributes} // Spread any other attributes
//                     />
//                 );
//             })}
//         </svg>
//     );
// };
//
// export default TeacherAnimation;
